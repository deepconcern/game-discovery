{"version":3,"sources":["webpack:///./src/games-search/games-search-context.ts","webpack:///./src/games-search/games-search-bar.tsx","webpack:///./src/games-search/games-search-provider.tsx","webpack:///./src/debounce.ts","webpack:///./src/search-results.tsx","webpack:///./src/games-search/use-search-query.ts","webpack:///./src/app/app.tsx"],"names":["GamesSearchContext","createContext","loading","searchQuery","updateSearchQuery","_","GamesSearchBar","useContext","className","type","placeholder","value","onChange","ev","target","gamesQuery","gql","GamesSearchProvider","children","useState","setSearchQuery","setLoading","error","setError","data","setData","apolloClient","useApolloClient","debouncedFireGamesQuery","useCallback","func","wait","fireImmediately","timeout","debouncedFunc","args","debounceCallback","apply","clearTimeout","setTimeout","this","debounce","query","variables","backgroundImageHeight","backgroundImageWidth","then","Error","newSearchQuery","length","useEffect","providerValue","games","Provider","SearchResults","console","reduce","rows","game","index","push","map","row","key","croppedBackgroundImage","id","title","src","displayName","client","ApolloClient","cache","InMemoryCache","link","HttpLink","uri","process","App"],"mappings":"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","file":"app.bundle.js","sourcesContent":["import { createContext } from 'react';\n\nimport {\n    GamesQuery_games as Game\n} from '../graphql-operations/GamesQuery';\n\nexport type GamesSearchData = {\n    error?: Error | null,\n    loading: boolean,\n    games?: Game[] | null,\n    searchQuery: string,\n    updateSearchQuery: (newSearchQuery: string) => void,\n};\n\nexport const GamesSearchContext = createContext<GamesSearchData>({\n    loading: false,\n    searchQuery: '',\n    updateSearchQuery: (_: string) => {\n        // No-op. Will be implemented by provider\n    },\n});\n","import React, { ChangeEvent, FC, useContext } from 'react';\n\nimport { GamesSearchContext } from './games-search-context';\n\nexport const GamesSearchBar: FC = () => {\n    const { searchQuery, updateSearchQuery } = useContext(GamesSearchContext);\n\n    const handleUserInput = (ev: ChangeEvent<HTMLInputElement>): void => {\n        updateSearchQuery(ev.target.value);\n    };\n\n    return (\n        <input\n            className=\"input is-large\"\n            type=\"search\"\n            placeholder=\"Search\"\n            value={searchQuery}\n            onChange={handleUserInput}\n        />\n    );\n};\n","import { useApolloClient } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\nimport React, { FC, useCallback, useEffect, useState } from 'react';\n\nimport { debounce } from '../debounce';\nimport {\n    GamesQuery,\n    GamesQueryVariables,\n} from '../graphql-operations/GamesQuery';\n\nimport { GamesSearchContext } from './games-search-context';\n\nconst BACKGROUND_IMAGE_HEIGHT = 400;\nconst BACKGROUND_IMAGE_WIDTH = 600;\nconst MIN_SEARCH_QUERY_LENGTH = 3;\nconst REFETCH_GAMES_DEBOUNCE = 500;\n\nconst gamesQuery = gql`\n    query GamesQuery(\n        $searchQuery: String!\n        $backgroundImageWidth: Int!\n        $backgroundImageHeight: Int!\n    ) {\n        games(searchQuery: $searchQuery) {\n            croppedBackgroundImage(\n                width: $backgroundImageWidth\n                height: $backgroundImageHeight\n            )\n            id\n            rating\n            ratings\n            title\n        }\n    }\n`;\n\nexport const GamesSearchProvider: FC = ({ children }) => {\n    const [searchQuery, setSearchQuery] = useState('');\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState<Error | null>(null);\n    const [data, setData] = useState<GamesQuery | null>(null);\n    const apolloClient = useApolloClient();\n    const debouncedFireGamesQuery = useCallback(\n        debounce((searchQuery: string) => {\n            apolloClient.query<GamesQuery, GamesQueryVariables>({\n                query: gamesQuery,\n                variables: {\n                    backgroundImageHeight: BACKGROUND_IMAGE_HEIGHT,\n                    backgroundImageWidth: BACKGROUND_IMAGE_WIDTH,\n                    searchQuery,\n                },\n            }).then(({ data }) => {\n                setLoading(false);\n                setData(data);\n            }).catch(error => {\n                setError(error instanceof Error ? error : Error(error));\n            });\n            setLoading(true);\n        }, REFETCH_GAMES_DEBOUNCE),\n        [apolloClient, setData, setError, setLoading]\n    );\n    const updateSearchQuery = useCallback((newSearchQuery: string) => {\n        setSearchQuery(newSearchQuery);\n\n        if (newSearchQuery.length < MIN_SEARCH_QUERY_LENGTH) {\n            return;\n        }\n        debouncedFireGamesQuery(newSearchQuery);\n    }, [debouncedFireGamesQuery, setSearchQuery]);\n\n    useEffect(() => {\n        debouncedFireGamesQuery('');\n    }, [debouncedFireGamesQuery]);\n\n    const providerValue = {\n        games: data?.games,\n        error,\n        loading,\n        searchQuery,\n        updateSearchQuery,\n    };\n\n    return (\n        <GamesSearchContext.Provider value={providerValue}>\n            {children}\n        </GamesSearchContext.Provider>\n    );\n};\n","export type DebounceableFunction = (...args: any[]) => void; // eslint-disable-line @typescript-eslint/no-explicit-any\n\nexport const debounce = <TFunction extends DebounceableFunction>(\n    func: TFunction,\n    wait: number,\n    fireImmediately = false\n): TFunction => {\n    let timeout: any = null; // eslint-disable-line @typescript-eslint/no-explicit-any\n\n    const debouncedFunc = function (\n        this: ThisParameterType<TFunction>,\n        ...args: Parameters<TFunction>[]\n    ): void {\n        const debounceCallback = (): void => {\n            if (!fireImmediately) {\n                func.apply(this, args);\n            }\n\n            timeout = null;\n        };\n\n        if (!timeout) {\n            if (fireImmediately) {\n                func.apply(this, args);\n            }\n            timeout = setTimeout(debounceCallback, wait);\n        } else {\n            clearTimeout(timeout);\n\n            timeout = setTimeout(debounceCallback, wait);\n        }\n    };\n\n    return debouncedFunc as TFunction;\n};\n","import React, { FC } from 'react';\n\nimport { GamesQuery_games as Game } from './graphql-operations/GamesQuery';\n\nimport { useSearchQuery } from './games-search';\n\nconst GAMES_PER_ROW = 6;\n\nexport const SearchResults: FC = () => {\n    const { games, loading, error } = useSearchQuery();\n\n    if (loading) {\n        return <div>Loading</div>;\n    }\n\n    if (error) {\n        console.error(error);\n        return <div>Error</div>;\n    }\n\n    return (\n        <div className=\"tile is-ancestor is-vertical\">\n            {(games || [])\n                .reduce((rows, game, index) => {\n                    if (index % GAMES_PER_ROW === 0) {\n                        rows.push([]);\n                    }\n\n                    const lastRow = rows[rows.length - 1];\n\n                    lastRow.push(game);\n\n                    return rows;\n                }, [] as Game[][])\n                .map((row, index) => (\n                    <div className=\"tile\" key={`search-result-row-${index}`}>\n                        {row.map(({ croppedBackgroundImage, id, title }) => (\n                            <div\n                                className={`tile is-parent is-${\n                                    12 / GAMES_PER_ROW\n                                }`}\n                                key={`search-result-game-${id}`}\n                            >\n                                <article className=\"tile is-child box\">\n                                    {croppedBackgroundImage && (\n                                        <figure className=\"figure is-4by3\">\n                                            <img src={croppedBackgroundImage} />\n                                        </figure>\n                                    )}\n                                    <h3 className=\"sub-title\">{title}</h3>\n                                </article>\n                            </div>\n                        ))}\n                    </div>\n                ))}\n        </div>\n    );\n};\n\nSearchResults.displayName = 'SearchResults';\n","import { useContext } from 'react';\n\nimport {\n    GamesQuery_games as Game\n} from '../graphql-operations/GamesQuery';\n\nimport { GamesSearchContext } from './games-search-context';\n\nexport type SearchQuery = {\n    error?: Error | null,\n    games?: Game[] | null,\n    loading: boolean,\n    searchQuery: string,\n};\n\nexport const useSearchQuery = (): SearchQuery => {\n    const { error, games, loading, searchQuery } = useContext(\n        GamesSearchContext\n    );\n\n    return {\n        error,\n        games,\n        loading,\n        searchQuery,\n    };\n};\n","import { ApolloProvider } from '@apollo/react-hooks';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { ApolloClient } from 'apollo-client';\nimport { HttpLink } from 'apollo-link-http';\nimport React, { FC } from 'react';\n\nimport { GamesSearchBar, GamesSearchProvider } from '../games-search';\nimport { SearchResults } from '../search-results';\n\nconst client = new ApolloClient({\n    cache: new InMemoryCache(),\n    link: new HttpLink({ uri: `${process.env['SERVER_URL']}` }),\n});\n\nexport const App: FC = () => {\n    return (\n        <ApolloProvider client={client}>\n            <GamesSearchProvider>\n                <header className=\"section\">\n                    <div className=\"container\">\n                        <h1 className=\"title\">Game Discovery</h1>\n                        <section>\n                            <GamesSearchBar />\n                        </section>\n                    </div>\n                </header>\n                <main>\n                    <section className=\"section\">\n                        <div className=\"container\">\n                            <SearchResults />\n                        </div>\n                    </section>\n                </main>\n            </GamesSearchProvider>\n        </ApolloProvider>\n    );\n};\n"],"sourceRoot":""}